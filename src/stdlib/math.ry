fn abs(x) {
    if (x >= 0) return x
    return -x
}

fn max(x, y) {
    if (x >= y) return x
    return y
}

fn min(x, y) {
    if (x <= y) return x
    return y
}

fn _ry_math_sqrt(x) {
    var epsilon = 0.00000001
    var y0 = x/2 + epsilon
    var y1 = (y0*y0 + 3*x)/(3*y0 + x/y0)
    while (abs(y1*y1 - x) > epsilon) {
        y0 = y1
        y1 = (y0*y0 + 3*x)/(3*y0 + x/y0)
    }
    return y1
}

fn sqrt(x) {
    assert(x >= 0, "Trying to compute square root of negative number.")
    return _ry_math_sqrt(x)
}

fn floor(x) {
    var n = 0
    if (x >= 0) {
        while (n + 1 <= x) {
            n = n + 1
        }
        return n
    } else {
        while (n >= x) {
            n = n - 1
        }
        return n
    }
}

fn _ry_math_pown(x, n) {
    if (n < 0) return _ry_math_pown(1/x, -n)
    else if (n == 0) return 1
    else if (n % 2 == 0) return _ry_math_pown(x*x, n/2)
    else return x * _ry_math_pown(x*x, (n-1)/2)
}

fn pown(x, n) {
    assert(floor(n) == n, "pow : the second parameter should be an integer.")
    return _ry_math_pown(x, n)
}

global _ry_math_e = 2.71828182845904523536028747135266250

fn exp(x) {
    var n = floor(x)

    if (n == x) return _ry_math_pown(_ry_math_e, n)

    var epsilon = x - n
    var res = _ry_math_pown(_ry_math_e, n)
    var correction = 1 + epsilon + epsilon*epsilon/2 + _ry_math_pown(epsilon, 3)/6 + _ry_math_pown(epsilon, 4)/24 + _ry_math_pown(epsilon, 5)/120 + _ry_math_pown(epsilon, 6)/720
    res = res * correction
    return res
}

fn _ry_math_log_helper(a, b, n) {
    var p = (b - a)/n
    var s = 0
    var i = 0
    while (i < n) {
        s = s + (1/a + 1/(a+p))*p/2
        a = a + p
        i = i + 1
    }
    return s
}

fn _ry_math_log(x) {

    var n = 0
    while (x > _ry_math_e) {
        x = x / _ry_math_e
        n = n + 1
    }

    return _ry_math_log_helper(1, x, 100) + n
}

fn log(x) {
    assert(x > 0, "log: cannot take log of negative number")
    return _ry_math_log(x)
}

fn pow(x, y) {
    var n = floor(y)
    if (n == y) return _ry_math_pown(x, n)
    assert(x > 0, "pow: cannot take fractional power non positive number.")
    return _ry_math_pown(x, n)*exp((y - n)*log(x))
}

fn integrate(f, a, b, n) {
    var p = (b - a)/n
    var s = 0
    var i = 0
    while (i < n) {
        s = s + (f(a) + f(a+p))*p/2
        a = a + p
        i = i + 1
    }
    return s
}

# TODO : getting really bad results, to update

global _ry_math_pi = 3.14159265358979323846264338327950288

fn sin(x) {
    return x - _ry_math_pown(x, 3)/6 + _ry_math_pown(x, 5)/120 - _ry_math_pown(x, 7)/5040 + _ry_math_pown(x, 9)/362880
}

fn cos(x) {
    return 1 - x*x/2 + _ry_math_pown(x, 4)/24 - _ry_math_pown(x, 6)/720 + _ry_math_pown(x, 8)/40320 - _ry_math_pown(x, 10)/36288000
}